FROM: Em <mailformailingli...@yahoo.de>
SUBJECT: Telling query-time QueryParser how to work by a TokenFilter
DATE: 9 Jun 2011

Hi list,

let's take a simple example. A TokenFilter creates the terms "i" and "pod"
from the word "ipod".
This example is simple and if all usecases for the self-made tokenFilter
were like this, I could do the whole thing on index-side. However, it is not
- WordDelimiterFilter is no option.

The problem with the creation of "i" and "pod" is, that "i" would also match
things like "iphone", "ipad", "itunes", "iworks"... at the end of the day a
lot of other apple and none-apple products. It is no option to increase
minimumMatch of the boolean query at this point!

What I want is to tell the queryParser in some way, i.e. by an Attribute,
that it should create a boolean query like this "i AND pad" OR "pad" without
giving "pad" a boost for its two occurences. 

I know that I need a customized queryParser. However I don't want to
reimplement all that stuff that already works just to make the parser aware
of a new attribute.
Can you point me to some methods or best-practices to jump into the
queryParsers implementation?

Regards,
Em

--
View this message in context: http://lucene.472066.n3.nabble.com/Telling-query-time-QueryParser-how-to-work-by-a-TokenFilter-tp3042678p3042678.html
Sent from the Lucene - Java Users mailing list archive at Nabble.com.

---------------------------------------------------------------------
To unsubscribe, e-mail: java-user-unsubscribe@lucene.apache.org
For additional commands, e-mail: java-user-help@lucene.apache.org


