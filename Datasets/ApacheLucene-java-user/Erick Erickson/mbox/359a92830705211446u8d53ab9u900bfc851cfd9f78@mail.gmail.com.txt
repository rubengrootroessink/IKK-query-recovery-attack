FROM: "Erick Erickson" <erickerick...@gmail.com>
SUBJECT: Re: In memory MultiSearcher
DATE: 21 May 2007

Why are you doing this in the first place? Do you actually have
evidence that the default Lucene behavior (caching, etc) is inadequate
for your needs?

I'd *strongly* recommend, if you haven't, just using the regular
FSDirectories rather than RAMDirectories and only getting
complex if that's too slow...

I ask because I am searching FS-based indexes that are 4G with
no problem. The index *was* 8G and had only a 10% performance hit.

Best
Erick

On 5/21/07, Peter W. <peter@marketingbrokers.com> wrote:
>
> Hello,
>
> I have been using a large, in memory MultiSearcher that
> is reaching the limits of my hardware RAM with this code:
>
>        try
>           {
>           IndexSearcher[] searcher_a=
>              {
>              new IndexSearcher(new RAMDirectory(index_one_path)),
>              new IndexSearcher(new RAMDirectory(index_two_path)),
>              new IndexSearcher(new RAMDirectory(index_thee_path)),
>              new IndexSearcher(new RAMDirectory(index_four_path)),
>              new IndexSearcher(new RAMDirectory(index_n_path))
>              };
>
>          MultiSearcher searcher_ms=new MultiSearcher(searcher_a);
>         ...
>           }
>        catch(Exception e)
>           {
>           System.out.println(e);
>           }
>
> For example, one of several indexes is 768MB. Is there possibly a
> better way to do this?
>
> Regards,
>
> Peter W.
>
>
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: java-user-unsubscribe@lucene.apache.org
> For additional commands, e-mail: java-user-help@lucene.apache.org
>
>

