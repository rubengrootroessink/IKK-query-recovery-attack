FROM: "Terenzio Treccani" <terenzio.trecc...@gmail.com>
SUBJECT: Re: Best design for an use case which is going to stress Lucene
DATE: 16 Mar 2006

You're both true, this doesn't sound like Lucene at all...
But the problem of such SQL tables is their size: speaking about
millions of customers and thousands of news items, the many-to-many
(CustArt) table would end up by containing BILLIONS of lines.... A bit
too big even for an Oracle table, I should think about partitioning
it, which is leading to performance issues... So, maybe option a)
would be a viable choice in terms of performances?

Thanks again
Terenzio

2006/3/15, Michael D. Curtin <mike@curtin.com>:
> This doesn't sound like a Lucene problem, at least the way you've described
> it.  For example, Lucene can't search on any field that isn't indexed (and
> most of yours aren't indexed).
>
> Given that, it seems like your option (c) is the way to go.  Seems like a
> simple RDBMS schema with 3 tables would do the trick:  Customers, Articles,
> and CustArt (or some other name munge) that notes which articles are for which
> customers.  If you use Oracle, there's even some sort of mechanism for serving
> up the XML files via SQL*NET, if you didn't want to have to provide for
> multiple types of connections between clients and server.
>
> Good luck!
>
> --MDC
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: java-user-unsubscribe@lucene.apache.org
> For additional commands, e-mail: java-user-help@lucene.apache.org
>
>

---------------------------------------------------------------------
To unsubscribe, e-mail: java-user-unsubscribe@lucene.apache.org
For additional commands, e-mail: java-user-help@lucene.apache.org


