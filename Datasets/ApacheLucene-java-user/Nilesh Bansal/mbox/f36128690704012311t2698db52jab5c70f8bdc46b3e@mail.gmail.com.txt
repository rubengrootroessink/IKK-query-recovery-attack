FROM: "Nilesh Bansal" <nileshban...@gmail.com>
SUBJECT: Re: Lock files in a read-only application
DATE: 2 Apr 2007

thanks for your replies. i have two more questions.
> You need to be really certain your own locking protects Lucene
> properly.  Specifically, no IndexReader can be created (restarted)
> while a writer is open against the index, and, only one writer can be
> open on the index at once (it sounds like you already have that).  If
> you're sure about that then disabling the locks as Hoss describes
> above is OK.
1. If our locking fails, what will happen in the worst case, i.e., an
IndexSearcher tries to read while an IndexWriter is updating the
index. Can it lead to index corruption, or just that the searcher will
give garbage results (or fail with exception) for that query.

2. Currently we are not using any IndexReader. When a request arrives,
we create a new IndexSearcher, and destroy it when it finishes
searching. Is it more efficient to create just one IndexSearcher and
share it with all threads? Or create one IndexReader and use it for
creating all IndexSearchers.

thanks again,
Nilesh

-- 
Nilesh Bansal.
http://queens.db.toronto.edu/~nilesh/

---------------------------------------------------------------------
To unsubscribe, e-mail: java-user-unsubscribe@lucene.apache.org
For additional commands, e-mail: java-user-help@lucene.apache.org


