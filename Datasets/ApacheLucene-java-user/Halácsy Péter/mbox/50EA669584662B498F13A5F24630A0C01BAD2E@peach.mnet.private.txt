FROM: Halácsy Péter <halacsy.pe...@axelero.com>
SUBJECT: RE: Lucene Query Structure
DATE: 19 Feb 2002



> -----Original Message-----
> From: Doug Cutting [mailto:DCutting@grandcentral.com]
> Sent: Tuesday, February 19, 2002 5:05 PM
> To: 'Lucene Developers List'; Lucene Users List
> Subject: RE: Lucene Query Structure
> 
> 

> 
> Good analogies for the semantics of BooleanQuery are most 
> internet search
> engines (except Google) which permit you to put '+' or '-' in 
> front of a
> word to require or prohibit it.  (Google requires terms by 
> default.)  A term
> with no plus or minus is not required for a match, but all of 
> the documents
> containing it are included.
> 

"Keyword searching refers to a search type in which you enter terms representing the concepts
you wish to retrieve. Boolean operators are not used.

Implied Boolean logic refers to a search in which symbols are used to represent Boolean logical
operators. In this type of search on the Internet, the absence of a symbol is also significant,
as the space between keywords defaults to either OR logic or AND logic. Many well-known search
engines traditionally defaulted to OR logic, but as a rule are moving away from the practice
and defaulting to AND. " http://library.albany.edu/internet/boolean.html

The queryParser of Lucene implies OR logic if no operator found in the query, doesn't it?
I think the users (on our site) prefer keyword searching and implied AND logic. Unfortunatly
to decide whether a query contains any operator or not, needs to read and parse the whole
query (not LL(k) language). How could I modify the queryParser to implement default AND logic?

peter


--
To unsubscribe, e-mail:   <mailto:lucene-user-unsubscribe@jakarta.apache.org>
For additional commands, e-mail: <mailto:lucene-user-help@jakarta.apache.org>


