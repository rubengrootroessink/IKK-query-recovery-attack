FROM: Chris Lamprecht <clampre...@gmail.com>
SUBJECT: Re: Reloading an index
DATE: 28 Jan 2005

I just ran into a similar issue.  When you close an IndexSearcher, it
doesn't necessarily close the underlying IndexReader.  It depends
which constructor you used to create the IndexSearcher.  See the
constructors javadocs or source for the details.

In my case, we were updating and optimizing the index from another
process, and reopening IndexSearchers.  We would eventually run out of
disk space because it was leaving open file handles to deleted files,
so the disk space was never being made available, until the JVM
processes ended.  If you're under linux, try running the 'lsof'
command to see if there are any handles to files marked "(deleted)".

-Chris

On Thu, 27 Jan 2005 08:28:30 -0800 (PST), Greg Gershman
<greggersh@yahoo.com> wrote:
> I have an index that is frequently updated.  When
> indexing is completed, an event triggers a new
> Searcher to be opened.  When the new Searcher is
> opened, incoming searches are redirected to the new
> Searcher, the old Searcher is closed and nulled, but I
> still see about twice the amount of memory in use well
> after the original searcher has been closed.   Is
> there something else I can do to get this memory
> reclaimed?  Should I explicitly call garbarge
> collection?  Any ideas?
> 
> Thanks.
> 
> Greg Gershman
> 
> __________________________________
> Do you Yahoo!?
> Meet the all-new My Yahoo! - Try it today!
> http://my.yahoo.com
> 
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: lucene-user-unsubscribe@jakarta.apache.org
> For additional commands, e-mail: lucene-user-help@jakarta.apache.org
> 
>

---------------------------------------------------------------------
To unsubscribe, e-mail: lucene-user-unsubscribe@jakarta.apache.org
For additional commands, e-mail: lucene-user-help@jakarta.apache.org


