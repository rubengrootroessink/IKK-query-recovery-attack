FROM: Erik Hatcher <e...@ehatchersolutions.com>
SUBJECT: Re: Queries not derived from the text index
DATE: 7 Feb 2006


On Feb 7, 2006, at 1:09 AM, Daniel Noll wrote:
> I've got an unusual (if not crazy) question about implementing  
> custom queries.
>
> Basically we have a UI where a user can enter a query and then  
> select a bunch of filters to be applied to the query.  These  
> filters are currently implemented using a fairly simple wrapper  
> around Lucene's own Filter class.
>
> Now we have one particular customer who says he wants to AND and OR  
> these filters in various combinations.  Now, I know that this is  
> possible on the model side, because I've already created AndFilter  
> and OrFilter classes to do this sort of thing.  However, the view  
> of the user interface would be impossible to keep simple if I were  
> to bulk it up to support this kind of filtering.

One thing that may be of use is the ChainedFilter:

	http://svn.apache.org/repos/asf/lucene/java/trunk/contrib/ 
miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter.java

> Is it possible to customise the QueryParser so that it returns  
> Query instances that have no relationship to the text index  
> whatsoever?  For instance, many of our existing filters build their  
> bitsets exclusively using a database, and we would need to keep  
> this as-is because we don't want to modify the text index itself.

I don't really follow what you're after here.  Could you give a  
concrete example of what you're after with "query" parsing?

It's certainly feasible to build a custom parser (JavaCC or  
otherwise) that does whatever you want, but that can be quite a  
complex endeavor.

	Erik




---------------------------------------------------------------------
To unsubscribe, e-mail: java-user-unsubscribe@lucene.apache.org
For additional commands, e-mail: java-user-help@lucene.apache.org


