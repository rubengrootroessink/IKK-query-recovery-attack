FROM: Erik Hatcher <e...@ehatchersolutions.com>
SUBJECT: Re: Problems...
DATE: 7 Jan 2005


On Jan 6, 2005, at 6:23 PM, Ross Rankin wrote:
> Could you explain this piece further, Erik "BooleanQuery and AND in
> TermQuery for resellerId"

Your code did a textual concatenation (and I'm paraphrasing as I don't 
have your previous e-mail handy) of "id:" + resellerId.  And then it 
parsed the expression.  This is not necessarily a problem, though I red 
flag it because of what QueryParser and Analyzers can do with that 
resellerId.  Regardless of how you indexed the reseller id field, an 
analyzer will process it when using QueryParser on it.  If that id is 
completely numeric, some analyzers will toss it, others may leave it 
alone.  If it has alpha characters in it, they may be lowercased.  In 
other words there are lots of variables.  This can be avoided by doing 
this:

	TermQuery tq = new TermQuery(new Term("id", resellerId));
	Query query = QueryParser.parse(/* the main expression */)
	BooleanQuery bq = new BooleanQuery();
	bq.add(tq, true, false);
	bq.add(query, true, false);

Now use bq as the query passed to search().

Make sense?

> I would love to improve the code of this piece and understand the 
> engine
> more.  Like for example, if something is indexed, it will be found in 
> the
> search but what about something that is just in the document and not
> indexed?

If the field is not indexed (but just stored), you cannot search on it.

>   I don't know the difference in Stored, Tokenized, Indexed, and
> Vector and where I would do what...  Is there info on that piece on 
> the web
> somewhere?

Stored = as-is value stored in the Lucene index

Tokenized = field is analyzed using the specified Analyzer - the tokens 
emitted are indexed

Indexed = the text (either as-is with keyword fields, or the tokens 
from tokenized fields) is made searchable (aka inverted)

Vectored = term frequency is stored in the index in an easily 
retrievable fashion.

> Like I have a large (6000 chars) text field I would like to add to the
> document, it's HTML.  I am guessing first it would need to be parsed 
> then
> added?  But added and indexed?  The field contains product specs and 
> product
> compatibility (most in a table form).

You definitely want to parse the HTML file (using NekoHTML, perhaps) 
and extract the text into fields.  Maybe the <title> and <body> should 
be separated, for example.

And yes, you would want these fields indexed since you want to search 
on them, I presume.

Stored fields, but not indexed, fields are for metadata you want 
carried along with search results (like the primary key to a database 
row, or a filename) that you'd use to display the results but is not 
needed for searching.

> Sorry for the newbie questions but I am not finding Google very chock 
> full
> of Lucene info...

Have I got a book to sell you!  :)  http://www.lucenebook.com

	Erik
	



---------------------------------------------------------------------
To unsubscribe, e-mail: lucene-user-unsubscribe@jakarta.apache.org
For additional commands, e-mail: lucene-user-help@jakarta.apache.org


