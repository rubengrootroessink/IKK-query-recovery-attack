FROM: mark harwood <markharw...@yahoo.co.uk>
SUBJECT: Re: reading fields selectively /
DATE: 25 Jan 2005

As Erik says,If your content is in the database surely
all you need Stored in Lucene is the primary key
anyway? (Obviously all other fields are indexed in
Lucene - just not stored)

I've been playing around with this approach using
HSQLDB and Derby (Cloudscape). This relies on having a
"key map" for mapping RDBMS results to  Lucene docIds
for the purposes of filtering. I've got two
implementations of KeyMap - one uses TermDocs to look
up lucene doc ids on-the-fly and the other
implementation uses a cached array of ints which can
be indexed into very quickly, given an RDBMS key.  The
latter approach could be a memory hog if the RDBMS
keys become sparse after deletions. 

The other interesting possibility is that both Derby
and HSQLDB, when used in embedded mode, can allow
Lucene functionality to be evaluated as functions
inside the database as part of a single SQL statement.
ThreadLocal variables set by the client code can
contain Lucene objects such as IndexReader and these
are then accessible by Java functions running inside
the database engine.
I'm hoping to get to the stage where I can write
something like this:

select top 10 lucene_highlight(adText),
lucene_score('kitchen table', adKey) as score from ads
where score >0 and price <200 order by score desc;


This could be a nice approach, especially if you throw
in some triggers to automatically index database
content on insertion.

Cheers
Mark


	
	
		
___________________________________________________________ 
ALL-NEW Yahoo! Messenger - all new features - even more fun! http://uk.messenger.yahoo.com

---------------------------------------------------------------------
To unsubscribe, e-mail: lucene-user-unsubscribe@jakarta.apache.org
For additional commands, e-mail: lucene-user-help@jakarta.apache.org


