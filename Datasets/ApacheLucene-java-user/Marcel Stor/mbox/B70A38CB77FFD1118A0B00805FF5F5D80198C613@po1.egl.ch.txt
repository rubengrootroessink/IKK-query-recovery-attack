FROM: Marcel Stor <mar...@frightanic.com>
SUBJECT: RE: UML model (Re: Potential Lucene drawbacks)
DATE: 7 Mar 2003

> Andrzej Bialecki wrote:
> > Marcel Stor wrote:
> > 
> >>>> I believe there are tools out there that will analyze Java 
> >>>
> >>>
> >>> sources and
> >>>
> >>>> create UML class diagrams from that.  I believe 
> TogetherJ or one of
> >>>> those 'all in one' tools can do that.
> >>>
> >>>
> >>> I can do it for you, if you want - it takes ~10 minutes.
> >>
> >>
> >>
> >> That would be great indeed! And then publish the diagrams 
> somewhere on
> >> the net? 
> > 
> > 
> > I can't (easily) host it, but I'll be glad to send the ZIP file to 
> > anyone that can do it. I just created it - it weighs ca. 1.2MB.
> > 
> 
> Ok, I just realized that I need to collect more input from 
> you, so that 
> the diagrams will be more useful for the public at large.
> 
> When I work in Together on coding stuff, I usually set the level of 
> diagram details to Implementation (then it shows all class 
> members, all 
> parameters in method signatures, in short - as much as it can do). 
> However, the diagrams are usually rather cluttered, for any package 
> above 10 classes or so. When I need to grasp conceptual 
> dependencies, I 
> set the detail level to Design, and then it shows only the 
> method/attribute names, types, and visibility (no parameters, 
> no initial 
> values). It presents a much cleaner picture, but you can't 
> immediately 
> see method signatures - you can see them only when you click on them 
> (this works in documentation too - you need to click on a 
> diagram to see 
> the classic javadoc entry in a separate frame).

I personally believe that we should take the conceptual (design) point
of view as the exact method signatures will be looked up in javadoc
anyway once the decision to subclass has been made.

> I also assume that we want to see classes and members with 
> any kind of 
> visibility (including private).

True.

> Also, another diagram option is to use UML style for classes 
> (i.e. class 
> members are presented as name(parameters...):type) or Java 
> style ( type 
> name(parameters...) ) - I guess more people would want the 
> Java style...

You bet!

Marcel


---------------------------------------------------------------------
To unsubscribe, e-mail: lucene-user-unsubscribe@jakarta.apache.org
For additional commands, e-mail: lucene-user-help@jakarta.apache.org


