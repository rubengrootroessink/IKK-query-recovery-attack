FROM: Tomer Gabel <to...@tomergabel.com>
SUBJECT: Re: IndexSearcher and multi-threaded performance
DATE: 19 Nov 2008


It's more than possible, it's probable. Cache thrashing would definitely be
my first guess; with so many copies of the exact same data you're not only
missing out on significant gains with the L2 cache, you're also taking a
major hit with every cache miss (which probably happens every context
switch) and the access to main memory.

Increased paging due to the increased memory pressure might also explain
some of the discrepancy.
--TG


Michael McCandless-2 wrote:
> 
> 
> Good!
> 
> In fact now we see similar slowness with nio-thread vs nio-shared as  
> we see for RAM-thread vs RAM-shared.  Ie, for both RAM and NIO you get  
> better performance sharing a single reader than reader-per-thread.   
> This is odd -- I would have expected that with infinite RAM reader-per- 
> thread would always be as fast or faster than a shared reader.  It's  
> particularly interesting that the RAM case shows it worse than the NIO  
> case.
> 
> Maybe it's because in the reader-per-thread case the CPU's cache is  
> less effective since things like norms & deleted docs are now  
> replicated in memory?
> 
> Mike
> 
> 


-----
--

http://www.tomergabel.com Tomer Gabel 


-- 
View this message in context: http://www.nabble.com/IndexSearcher-and-multi-threaded-performance-tp20449375p20585920.html
Sent from the Lucene - Java Users mailing list archive at Nabble.com.


---------------------------------------------------------------------
To unsubscribe, e-mail: java-user-unsubscribe@lucene.apache.org
For additional commands, e-mail: java-user-help@lucene.apache.org


