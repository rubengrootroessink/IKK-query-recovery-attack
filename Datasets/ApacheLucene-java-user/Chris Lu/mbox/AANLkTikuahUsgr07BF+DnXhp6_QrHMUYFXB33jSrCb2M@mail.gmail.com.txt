FROM: Chris Lu <chris...@gmail.com>
SUBJECT: Re: Lucene applicability
DATE: 25 Aug 2010

I see you are coming from the database world. To get a better understanding
of Lucene, I would suggest you use the free version of DBSight, which let
you create Lucene index with SQL after a few clicks.

Basically Lucene is more like a list of denormalized documents. So if you
change your database schema, your lucene index would likely need to be
changed and re-built also.

The combined full text search and range queries are easy in Lucene index.
You don't need to worry about it.

It's a great question about 3). If anything goes wrong, you would need to
rebuild the index. So you would need a mechanism to get prepared and rebuild
the index when you need to.

-- 
Chris Lu
-------------------------
Instant Scalable Full-Text Search On Any Database/Application
site: http://www.dbsight.net
demo: http://search.dbsight.com
Lucene Database Search in 3 minutes:
http://wiki.dbsight.com/index.php?title=Create_Lucene_Database_Search_in_3_minutes
DBSight customer, a shopping comparison site, (anonymous per request) got
2.6 Million Euro funding!

On Wed, Aug 25, 2010 at 6:20 AM, Schreiner Wolfgang <
Wolfgang.Schreiner@itsv.at> wrote:

> Hi all,
>
> We are currently evaluating potential search frameworks (such as Hibernate
> Search) which might be suitable to use in our project (using Spring, JPA
> with Hibernate) ...
> I am sending this E-Mail in hope you can advise me on a few issues that
> would help us in our decision making process.
>
>
> 1.)    Is Lucene suitable for full text database searches? I read Lucene
> was designed to index and search documents but how does it behave querying
> relational data sets in general?
>
> 2.)    Can we make assumptions on query performance considering combined
> searches, range queries or structured data and wildcard searches? If we
> consider a data structure consisting of say 3 tables and each table contains
> a few million entries (e.g. first name, last name and address fields) and we
> search for common values (such as 'John', 'Smith' and 'New York') where
>
> a.       each value for itself and each combination would result in
> millions of hits
>
> b.      a person can have multiple first names and we want to make sure to
> receive any combination of the last name with any first name
>
> c.       we search for a last name and a range of birth dates
>
> 3.)    Transaction safety: How does Lucene handle indexes? If we update
> data model and index, what happens to the index if anything goes wrong as
> soon as the data model has been persisted?
>
> I hope I made the issues clear to you, just some general thoughts about how
> Lucene would behave in a real world application scenario ... Any support or
> pointers to helpful documents or Web links are highly appreciated!
> Cheers for now,
>
> w
>
>

