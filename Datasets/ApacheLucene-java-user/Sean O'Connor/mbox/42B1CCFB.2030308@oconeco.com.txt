FROM: Sean O'Connor <s...@oconeco.com>
SUBJECT: Re: Search Hit frequency and location
DATE: 16 Jun 2005

Thanks for the clarification. I had assumed that to be the case, but 
assumptions have a tendency to come back and bite me in inappropriate 
places. By pointing that out, you've probably saved me from beating my 
head against the wall in the near future : -).

The big stumbling block I have at the moment is understanding whether 
Terms can be used to find something like a phrase query, proximity 
query, or boolean query. I think the answer is no, two different 
concepts. But I also tend to think that the wheel has already been 
invented to find how many times a phrase (i.e. "Lucene in Action") 
appears in a document. Before I go digging through the source code, and 
possibly creating some rather embarrassing hack(s), I thought I would 
check to see if there is a 'right' way to go about this.

Alternatively, any suggestions on what to google, or where to look to 
educate myself would be welcome as well.
Cheers,

Sean


Erik Hatcher wrote:

>
> On Jun 16, 2005, at 12:03 PM, Sean O'Connor wrote:
>
>> Yes, see the Javadoc for IndexReader.termPositions().
>>     I'm probably missing the obvious here, but I assume this refers to
>> the analyzed terms (i.e. individual words, possibly transmogrified by
>> the analyzer).
>
>
> Just to respond to part of your mail:
>
> Terms do not necessarily come from analysis... they could be  
> specified directly using Field.Keyword() for example.  Any _indexed_  
> field has term(s), with the possibility that the indexed field is  
> analyzed or not.
>
>     Erik
>
>
>
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: java-user-unsubscribe@lucene.apache.org
> For additional commands, e-mail: java-user-help@lucene.apache.org
>
>



---------------------------------------------------------------------
To unsubscribe, e-mail: java-user-unsubscribe@lucene.apache.org
For additional commands, e-mail: java-user-help@lucene.apache.org


