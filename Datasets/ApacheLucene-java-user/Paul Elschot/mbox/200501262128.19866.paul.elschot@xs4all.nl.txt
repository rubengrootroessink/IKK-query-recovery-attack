FROM: Paul Elschot <paul.elsc...@xs4all.nl>
SUBJECT: Re: Suggestions for documentation or LIA
DATE: 26 Jan 2005

On Wednesday 26 January 2005 18:40, Ian Soboroff wrote:
> jian chen <chenjian1227@gmail.com> writes:
> 
> > Just to continue this discussion. I think right now Lucene's retrieval
> > algorithm is based purely on Vector Space Model, which is simple and
> > efficient.
> 
> As I understand it, it's indeed a tf-idf vector space approach, except
> that the queries are structured and as such, the tf-idf weights are
> totaled as a straight cosine among siblings of a BooleanQuery, but
> other query nodes may do things differently, for example, I haven't
> read it but I assume PhraseQueries require all terms present and
> adjacent to contribute to the score.
> 
> There is also a document-specific boost factor in the equation which
> is essentially a hook for document things like recency, PageRank, etc
> etc.
> 
> You can tweak this by defining custom Similarity classes which can say
> what the tf, idf, norm, and boost mean.  You can also affect the
> term normalization at the query end in BooleanScorer (I think? through
> the sumOfSquares method?).
> 
> We've implemented something kind of like the Similarity class but
> based on a model which decsribes a larger family of "similarity
> functions".  (For the curious or similarly IR-geeky, it's from Justin
> Zobel's paper from a few years ago in SIGIR Forum.)  Essentially I
> need more general hooks than the Lucene Similarity provides.  I think
> those hooks might exist, but I'm not sure I know which classes they're
> in.
> 
> I'm also interested in things like relevance feedback which can affect
> term weights as well as adding terms to the query... just how many
> places in the code do I have to subclass or change?

None. Create your own TermQuery instances, set their boosts,
and add them to a BooleanQuery.
 
> It's clear that if I'm interested in a completely different model like
> language modeling the IndexReader is the way to go.  In which case,
> what parts of the Lucene class structure should I adapt to maintain
> the incremental-results-return, inverted list skips, and other
> features which make the inverted search fast?

To keep the speed, the one thing you should keep is the performance of
TermQuery. In case you're interested in changing proximity scores,
the same holds for SpanTermQuery.
For a variation on TermQuery that scores query terms by their density in a
document field you can have a look here:
http://issues.apache.org/bugzilla/show_bug.cgi?id=31784

On top of these you can implement your own Scorers, but for Zobel's
similarities you probably won't need much more than what BooleanQuery
provides.
To use the inverted list skips, make sure to implement and use skipTo()
on your scorers.
In case you need larger queries in conjunctive normal form:
+(synA1 synA2 ....) +(synB1 synB2 ...) +(synC1 synC2 ...) ....
the development version of BooleanQuery might be a bit faster
than the current one.

For an interesting twist in the use of idf please search
for "fuzzy scoring changes" on lucene-dev at the end of 2004.

Regards,
Paul Elschot


---------------------------------------------------------------------
To unsubscribe, e-mail: lucene-user-unsubscribe@jakarta.apache.org
For additional commands, e-mail: lucene-user-help@jakarta.apache.org


