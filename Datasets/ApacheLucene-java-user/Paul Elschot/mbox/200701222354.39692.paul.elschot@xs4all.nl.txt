FROM: Paul Elschot <paul.elsc...@xs4all.nl>
SUBJECT: Re: Technology Preview of new Lucene QueryParser
DATE: 22 Jan 2007

On Monday 22 January 2007 22:29, Chris Hostetter wrote:
> 
> : With my syntax you can get real precedence that mixes with how no
> : precedence (Lucene's unary operators) works. No precedence is created by
> : allowing you to make any operator resolve first...any operator that
> : resolves first connected with another operator that resolves first will
> : behave as if neither has precedence over the other and generate a single
> : BooleanQuery.
> 
> what i was trying to get at is that i don't think precedence is really the
> issue -- it's the lack of unary operators.  If the only way to get a
> single BooleanQuery is to use operators that have the exact same
> precedence, and all operators are binary, then how to you create the
> equivilent of QueryParser "+a b c -d -e" ? ... if i remember your syntax
> correctly the only way to match the same documents is...
> 	"a & ( b | c ) ! d ! e"
> 
> ...but it won't score the same way because the parens force a nested
> boolean query to be created.

I considered adding the removal of such nests to the surround
query language, but I never took the time to actually do it.

Anyway, which of the two forms is more user friendly? I wish I knew,
but the lack of brackets in the prefix form is tempting.

Thanks for spelling this out,

Paul Elschot

---------------------------------------------------------------------
To unsubscribe, e-mail: java-user-unsubscribe@lucene.apache.org
For additional commands, e-mail: java-user-help@lucene.apache.org


