FROM: Kay Kay <kaykay.uni...@gmail.com>
SUBJECT: IndexSearcher - architecture - shortest possible latency between update of index (via IndexWriter/IndexReader) and querying the same using IndexSearcher
DATE: 8 Jan 2009

Hi-
  For one of our apps - we are doing a lot of additions and deletions 
(high frequency) at any given time.  Assuming the same index directory 
under discussion between the  writers ( IndexWriter and IndexReader, the 
latter for deletions) and the readers (IndexSearcher to begin with) - we 
want the IndexSearcher to retrieve the most updated index at the 
shortest possible time (with more priority on the most updated data).  
So when a IndexWriter and IndexReader updates a particular index 
directory (with proper locking between themselves) and when we search 
using IndexSearcher (that could have been initialized / warmed up in the 
past )- will another search query initiated from the same IndexSearcher 
instance consider the updated index in real time.
  Are the IndexSearcher instances  'watching' the index directories for 
changes and updating their data structures internally.
 
  What would be the best / fastest way to make sure that IndexSearcher 
instances return data that are semantically data ( assuming the 
sequential order of data). What are the trade-offs that we can make here 
- when it comes to design decisions of a Lucene-based application. Thanks.

---------------------------------------------------------------------
To unsubscribe, e-mail: java-user-unsubscribe@lucene.apache.org
For additional commands, e-mail: java-user-help@lucene.apache.org


