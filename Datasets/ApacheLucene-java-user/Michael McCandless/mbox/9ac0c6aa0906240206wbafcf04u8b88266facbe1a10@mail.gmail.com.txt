FROM: Michael McCandless <luc...@mikemccandless.com>
SUBJECT: Re: Analyzing performance and memory consumption for boolean queries
DATE: 24 Jun 2009

Is it possible the occasional large merge is clearing out the IO cache
(thus "unwarming" your searcher)?  (Though since you're rsync'ing your
updates in, it sounds like a separate machine is building the index).

Or... linux will happily swap out a process's core in favor of IO
cache (though I'd expect this effect to be much less spikey).  You can
tune "swappiness" to have it not do that:

    http://kerneltrap.org/node/3000

Maybe Lucene's norms/deleted docs/field cache were getting swapped out?

Lucene's postings reside entirely on disk (ie, Lucene doesn't cache
those in RAM; we rely on the OS's IO cache).  Lucene does a linear
scan through the terms in the query... Linux will readahead, though,
if things are fragmented this could mean lots of seeking.

Have you tried putting the index on an SSD instead of a spinning magnetic disk?

Mike

On Tue, Jun 23, 2009 at 4:53 PM, Nigel<nigelspleen@gmail.com> wrote:
> Our query performance is surprisingly inconsistent, and I'm trying to figure
> out why.  I've realized that I need to better understand what's going on
> internally in Lucene when we're searching.  I'd be grateful for any answers
> (including pointers to existing docs, if any).
>
> Our situation is this: We have roughly 250 million docs spread across four
> indexes.  Each doc has about a dozen fields, all stored and most indexed.
> (They're the usual document things like author, date, title, contents,
> etc.)  Queries differ in complexity but always have at least a few terms in
> boolean combination, up to some larger queries with dozens or even hundreds
> of terms combined with ands, ors, nots, and parens.  There's no sorting,
> even by relevance: we just want to know what matches.  Query performance is
> often sub-second, but not infrequently it can take over 20 seconds (we the
> time-limited hit collector, so anything over 20 seconds is stopped).
> Obviously the more complex queries are slower on average, but a given query
> can sometimes be much slower or much faster.
>
> My assumption is that we're having memory problems or disk utilization
> problems or both.  Our app has a 5gb JVM heap on an 8gb server with no other
> user processes running, so we shouldn't be paging and should have some room
> for Linux disk cache.  The server is lightly loaded and concurrent queries
> are the exception rather than the norm.  Two of the four indexes are updated
> a few times a day via rsync and subsequently closed and re-opened, but poor
> query performance doesn't seem to be correlated with these times.
>
> So, getting to some specific questions:
>
> 1) How is the inverted index for a given field structured in terms of what's
> in memory and what's on disk?  Is it dynamic, based on available memory, or
> tuneable, or fixed?  Is there a rule of thumb that could be used to estimate
> how much memory is required per indexed field, based on the number of terms
> and documents?  Likewise, is there a rule of thumb to estimate how many disk
> accesses are required to retrieve the hits for that field?  (I'm thinking,
> by perhaps false analogy, of how a database maintains a b-tree structure
> that may reside partially in RAM cache and partially in disk pages.)
>
> 2) When boolean queries are searched, is it as simple as iterating the hits
> for each ANDed or ORed term and applying the appropriate logical operators
> to the results?  For example, is searching for "foo AND bar" pretty much the
> same resource-wise as doing two separate searches, and therefore should the
> query performance be a linear function of the number the number of search
> terms?  Or is there some other caching and/or decision logic (perhaps kind
> of like a database's query optimizer) at work here that makes the I/O and
> RAM requirements more difficult to model from the query?  (Remember that
> we're not doing any sorting.)
>
> I'm hoping that with some of this knowledge, I'll be able to better model
> the RAM and I/O usage of the indexes and queries, and thus eventually
> understand why things are slow or fast.
>
> Thanks,
> Chris
>

---------------------------------------------------------------------
To unsubscribe, e-mail: java-user-unsubscribe@lucene.apache.org
For additional commands, e-mail: java-user-help@lucene.apache.org


